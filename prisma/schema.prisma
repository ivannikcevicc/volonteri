// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String? @unique
  emailVerified DateTime?
  image String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  favoriteIds String[] @db.ObjectId
  accounts Account[]
  jobs Job[]
  applications Application[]
  reviews Review[]
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider,providerAccountId])
}

model Review {
  userId String @db.ObjectId
  jobId String @db.ObjectId
  id String @id @default(auto()) @map("_id") @db.ObjectId

  description String
  ratingNumber Int
  userImg String
  userName String

  createdAt DateTime @default(now())

  job Job @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

}

model Job {
  userId String @db.ObjectId
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String
  imageSrc String
  createdAt DateTime @default(now())
  category String
  cityName String?
  lat String?
  lng String?
  countryName String?
  organizationName String?
  postLink String?
  email String?
  formLink String?
  required String?
  phoneNumber String?
  organizationLink String?
  flag String?
  
  peopleCount Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  applications Application[]
  reviews Review[]
}

model Application {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  jobId String @db.ObjectId
  fileUrl String
  name String
  email String
  phoneNumber String
  expirience String
  about String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  job Job @relation(fields: [jobId], references: [id], onDelete: Cascade)
}